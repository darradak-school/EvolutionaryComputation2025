ALGORITHM DESIGNS

STEADY STATE ALGORITHM (ea_steadystate.py - also run as alg 2 in evolutionary_modular.py testing):
This algorithm uses tournament selection for parent selection to maintain a balance between exploration and exploitation, 
order crossover preserves good sequences, and inversion mutation removes crossings. 
A small amount of elite preservation is present to make sure we donâ€™t lose improvements. Its low replacement rate at 5% is to make the algorithm faster, 
as we must replace less individuals, and it preserves a wider variety of individuals. This algorithm produces results within 5-20% of the optimum, 
usually performing better on smaller datasets, as it converges too slowly for it to reach the optimum on large datasets. However, 
it produces results fast, only 4 seconds for 50 individuals and 20,000 generations on eil51.

Generational Explorative ALGORITHM (Algorithm1_Generational_PMX_Inversion_Tournament - evolutionary_modular.py)
PMX Crossover: Preserves positional information and city relationships by maintaining the mapping between positions from both parents
Inversion Mutation: Maintains adjacency relationships while exploring tour variations through segment reversal
Tournament Selection (size 3): Moderate selection pressure that balances exploration and exploitation

Generational Balanced (Algorithm3_Generational_Order_Swap_FitnessProp - evolutionary_modular.py)
Order Crossover: Maintains relative city sequences from parents, preserving important ordering information
Swap Mutation: Gentle local search moves with rate (0.15) for thorough exploration
Fitness Proportional Selection: Maintains population diversity and prevents premature convergence by giving all individuals a chance based on relative fitness
Chosen as closest performance to steady_state and inverover when bruteforce testing diferent algorithms.